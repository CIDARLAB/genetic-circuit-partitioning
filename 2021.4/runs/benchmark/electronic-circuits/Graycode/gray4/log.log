2022-11-08 16:36:49.580 [main] INFO  LSRuntimeObject - Executing Stage: logicSynthesis
2022-11-08 16:36:49.594 [main] INFO  LSRuntimeObject - Executing Algorithm: Yosys
2022-11-08 16:36:50.234 [main] INFO  Yosys - +-----------------------------------------------------
2022-11-08 16:36:50.235 [main] INFO  Yosys - |			    RESULTS
2022-11-08 16:36:50.235 [main] INFO  Yosys - +-----------------------------------------------------
2022-11-08 16:36:50.235 [main] INFO  Yosys - +-----------------------------------------------------
2022-11-08 16:36:50.235 [main] INFO  Yosys - 
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 UNKNOWN, clang 12.0.0 -fPIC -Os)


-- Executing script file `./Circuits/Graycode/gray4/gray4.ys' --

1. Executing Verilog-2005 frontend: ./Circuits/Graycode/gray4.v
Parsing Verilog input from `./Circuits/Graycode/gray4.v' to AST representation.
Generating RTLIL representation for module `\binary2gray_4'.
Successfully finished Verilog frontend.

2. Executing FLATTEN pass (flatten design).
No more expansions possible.

3. Executing SPLITNETS pass (splitting up multi-bit signals).

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Finding top of design hierarchy..
root of   0 design levels: binary2gray_4       
Automatically selected binary2gray_4 as design top module.

4.2. Analyzing design hierarchy..
Top module:  \binary2gray_4

4.3. Analyzing design hierarchy..
Top module:  \binary2gray_4
Removed 0 unused modules.

5. Executing PROC pass (convert processes to netlists).

5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

5.3. Executing PROC_INIT pass (extract init attributes).

5.4. Executing PROC_ARST pass (detect async resets in processes).

5.5. Executing PROC_MUX pass (convert decision trees to multiplexers).

5.6. Executing PROC_DLATCH pass (convert process syncs to latches).

5.7. Executing PROC_DFF pass (convert process syncs to FFs).

5.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6. Executing TECHMAP pass (map to technology primitives).

6.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.2. Continuing TECHMAP pass.
No more expansions possible.

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module binary2gray_4.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\binary2gray_4'.
Removed a total of 0 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \binary2gray_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \binary2gray_4.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\binary2gray_4'.
Removed a total of 0 cells.

7.6. Executing OPT_RMDFF pass (remove dff with constant values).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \binary2gray_4..

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module binary2gray_4.

7.9. Finished OPT passes. (There is nothing left to do.)

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `\binary2gray_4' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module binary2gray_4.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\binary2gray_4'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \binary2gray_4..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \binary2gray_4.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\binary2gray_4'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \binary2gray_4..

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module binary2gray_4.

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing HIERARCHY pass (managing design hierarchy).

10.1. Analyzing design hierarchy..
Top module:  \binary2gray_4

10.2. Analyzing design hierarchy..
Top module:  \binary2gray_4
Removed 0 unused modules.

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \binary2gray_4..

12. Generating Graphviz representation of design.
Writing dot description to `./Circuits/Graycode/gray4/gray4_yosys.dot'.
Dumping module binary2gray_4 to page 1.
Exec: dot -Tpdf './Circuits/Graycode/gray4/gray4_yosys.dot' > './Circuits/Graycode/gray4/gray4_yosys.pdf.new' && mv './Circuits/Graycode/gray4/gray4_yosys.pdf.new' './Circuits/Graycode/gray4/gray4_yosys.pdf'

13. Executing EDIF backend.

14. Executing JSON backend.

End of script. Logfile hash: 4b72184e6a, CPU: user 0.02s system 0.01s
Yosys 0.9 (git sha1 UNKNOWN, clang 12.0.0 -fPIC -Os)
Time spent: 50% 3x read_verilog (0 sec), 9% 4x opt_expr (0 sec), ...

2022-11-08 16:36:50.237 [main] INFO  Yosys - 
