2021-11-10 15:26:35.761 [main] INFO  LSRuntimeObject - Executing Stage: logicSynthesis
2021-11-10 15:26:35.768 [main] INFO  LSRuntimeObject - Executing Algorithm: Yosys
2021-11-10 15:26:36.533 [main] INFO  Yosys - +-----------------------------------------------------
2021-11-10 15:26:36.534 [main] INFO  Yosys - |			    RESULTS
2021-11-10 15:26:36.534 [main] INFO  Yosys - +-----------------------------------------------------
2021-11-10 15:26:36.535 [main] INFO  Yosys - :               NOR cells:       84
2021-11-10 15:26:36.535 [main] INFO  Yosys - :               NOT cells:       47
2021-11-10 15:26:36.535 [main] INFO  Yosys - :        internal signals:      472
2021-11-10 15:26:36.535 [main] INFO  Yosys - :           input signals:        7
2021-11-10 15:26:36.536 [main] INFO  Yosys - :          output signals:        1
2021-11-10 15:26:36.536 [main] INFO  Yosys - +-----------------------------------------------------
2021-11-10 15:26:36.536 [main] INFO  Yosys - 
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 UNKNOWN, clang 12.0.0 -fPIC -Os)


-- Executing script file `./13/7input_13.ys' --

1. Executing Verilog-2005 frontend: 7input_13.v
Parsing Verilog input from `7input_13.v' to AST representation.
Generating RTLIL representation for module `\x13'.
Note: Assuming pure combinatorial block at 7input_13.v:3 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Executing FLATTEN pass (flatten design).
No more expansions possible.

3. Executing SPLITNETS pass (splitting up multi-bit signals).

4. Executing HIERARCHY pass (managing design hierarchy).

4.1. Finding top of design hierarchy..
root of   0 design levels: x13                 
Automatically selected x13 as design top module.

4.2. Analyzing design hierarchy..
Top module:  \x13

4.3. Analyzing design hierarchy..
Top module:  \x13
Removed 0 unused modules.

5. Executing PROC pass (convert processes to netlists).

5.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$7input_13.v:3$1 in module x13.
Marked 1 switch rules as full_case in process $proc$7input_13.v:3$1 in module x13.
Removed a total of 1 dead cases.

5.3. Executing PROC_INIT pass (extract init attributes).

5.4. Executing PROC_ARST pass (detect async resets in processes).

5.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\x13.$proc$7input_13.v:3$1'.
     1/2: $1\out[0:0]
     2/2: $0\out[0:0]

5.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\x13.\out' from process `\x13.$proc$7input_13.v:3$1'.

5.7. Executing PROC_DFF pass (convert process syncs to FFs).

5.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\x13.$proc$7input_13.v:3$1'.
Removing empty process `x13.$proc$7input_13.v:3$1'.
Cleaned up 1 empty switch.

6. Executing TECHMAP pass (map to technology primitives).

6.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.2. Continuing TECHMAP pass.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=128 for cells of type $pmux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~271 debug messages>

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module x13.
<suppressed ~642 debug messages>

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\x13'.
<suppressed ~3186 debug messages>
Removed a total of 1062 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \x13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \x13.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\x13'.
Removed a total of 0 cells.

7.6. Executing OPT_RMDFF pass (remove dff with constant values).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \x13..
Removed 0 unused cells and 673 unused wires.
<suppressed ~1 debug messages>

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module x13.

7.9. Finished OPT passes. (There is nothing left to do.)

8. Executing ABC pass (technology mapping using ABC).

8.1. Extracting gate netlist of module `\x13' to `<abc-temp-dir>/input.blif'..
Extracted 471 gates and 480 wires to a netlist network with 7 inputs and 1 outputs.

8.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 5 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + &get -n 
ABC: + &dch -f 
ABC: + &nf 
ABC: + &put 
ABC: + write_blif <abc-temp-dir>/output.blif 

8.1.2. Re-integrating ABC results.
ABC RESULTS:               NOR cells:       84
ABC RESULTS:               NOT cells:       47
ABC RESULTS:        internal signals:      472
ABC RESULTS:           input signals:        7
ABC RESULTS:          output signals:        1
Removing temp directory.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module x13.

9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\x13'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \x13..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \x13.
Performed a total of 0 changes.

9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\x13'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \x13..
Removed 0 unused cells and 258 unused wires.
<suppressed ~1 debug messages>

9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module x13.

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing HIERARCHY pass (managing design hierarchy).

10.1. Analyzing design hierarchy..
Top module:  \x13

10.2. Analyzing design hierarchy..
Top module:  \x13
Removed 0 unused modules.

11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \x13..

12. Generating Graphviz representation of design.
Writing dot description to `./13/7input_13_yosys.dot'.
Dumping module x13 to page 1.
Exec: dot -Tpdf './13/7input_13_yosys.dot' > './13/7input_13_yosys.pdf.new' && mv './13/7input_13_yosys.pdf.new' './13/7input_13_yosys.pdf'

13. Executing EDIF backend.

14. Executing JSON backend.

End of script. Logfile hash: 2647da0288, CPU: user 0.30s system 0.01s
Yosys 0.9 (git sha1 UNKNOWN, clang 12.0.0 -fPIC -Os)
Time spent: 31% 4x opt_merge (0 sec), 20% 1x techmap (0 sec), ...

2021-11-10 15:26:36.538 [main] INFO  Yosys - 
